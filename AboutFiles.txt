app {
    Весь основной код приложения
    Console {
        Все что необходимо для обработки коммандов (стандартных и кастомных)
        Kernel.php {
            Регистрация кастомных коммандов
        }
    }
    Events {
        Входит в раздел слушатели и события. Слушатели и события объявляются в EventServiceProvider.php
    }
    Http {
        Controllers {
            Обработка запросов на отображение, создание, обновление и удаление пользователей
        }
        Middleware {
            MIDDLEWARE - ПРОМЕЖУТОЧНЫЙ СЛОЙ МЕЖДУ ВХОДЯЩИМ ЗАПРОСОМ И КОНТРОЛЛЕРОМ
            Можно записать логи, добавить к ответу файлы куки и т.п.
            Authenticate - вошел пользователь или не вошел
            EncryptCookies - когда запрос с куками прилетает в наше приложение - он расшифровывает их, а на выходе - шифрует
            PreventRequestsDuringMaintenance - находится ли наше приложение в режиме обслуживания при каком-либо запросе
            php artisan down - включает режим обслуживания
            RedirectIfAuthenticated - если юзер уже вошел в систему - перекидывает в личный кабинет
            TrimStrings - если была отправлена форма регистрации, может быть такое что юзер прислал email с пробелом в конце,
            этот миддлвейр обрезает пробелы в начале и в конце полей
            TrustHosts - хосты с которыми будет взаимодействовать приложение
            TrustProxies - сервер-балансировщик распределяет все запросы поровну на сервера приложения
            VerifyCsrfToken - защита от Csrf атаки (подделка межсайтовых запросов). Нужно соблюдать его при использовании форм
            POST, PUT, DELETE | @csrf
        }
        Requests {
            Другая форма для правил валидации. Чтобы не писать логику валидации в контроллере - можем создать отдельный класс, в котором в методе
            "rules" будут перечислены правила валидации
        }
        Kernel.php {
            Все что необходимо для обработки HTTP запросов
            Настройка мидлвейров - классы которые обрабатывают запрос, прежде чем он попадает в контроллер
        }
    }
    Jobs {

    }

    Listeners {
        Слушатели событий, объявляются в EventServiceProvider.php
    }
    Mail {
        При запуске команды php artisan make:mail {name}. Служит для отправки уведомлений на почту
    }
    Models {
        Модели приложения, с помощью которых можно задать конфигурацию на относящийся к ним таблицы и взаимодействовать с ними
    }
    Providers {
        Системные конфигурируемые настройки
        AppServiceProvider {
            В методе "boot" можно задать настройки для вьюх и т.д.
        }
        EventServiceProvider {
            Регистрация слушателей и событий
        }
        RouteServiceProvider {
            Можно задать новые пути для рутов, если мы хотим разделить их на несоклько файлов
        }
    }
    Rules {
        Можно задать дополнительные правила валидации, которые потом сможем использовать в контроллере или в Requests
    }
    Scopes {
        Можно задать условии, по котором при обращении к модели будут браться определенные данные (например при запросах SELECT, UPDATE, DELETE)
    }
}

bootstrap {
    app.php {
        Главный файл по запуску приложения. С этого файла начинается работа всего фреймворка
        В переменную $app кладется экземпляр самого приложение, регистрируется HTTP и консольные ядра
        Возвращается экземпляр приложения
    }
    cache {
        Этот каталог входит в gitignore, там фреймворк делает какие-то свои операции, которые не будут видны в репозитории
    }
}

config {
    Просто множество файлов конфигурации
    Можно создавать свои файлы конфигурации
}

database {
    Создаются файлы для работы с базой данных
    factories {
        Содержится конфиг для сидинга базы данных
    }
    migrations {
        Миграции к базе данных
    }
    seeders {
        Сиды для базы данных, которые используют фабрики
    }
}

lang {
    Содержит настройку по языку проекта
}

public {
    Содержит в себе публичные файлы
    Все запросы которые приходят от браузера должны попадать в файл index.php
    Берем HTTP ядро и запускаем обработку запроса.
}

resources {
    css, js {
        Исходные стили для страничек
    }
    views {
        Все странички сайта
        components {
            Работает как интерфейсы в ООП, только с небольшой реализацией и начальными параметрами
        }
    }
}

routes {
    Можно создавать свои файлы для маршрутизации
    api.php {
        Маршруты для API
    }

    console.php {
        Мы можем создавать свои команды, но лучше это делать с помощью php artisan make:command <> -> тогда этот файла попадет
        в app/Console/Command
    }

    channels.php {
        Позволяет регистрировать каналы, проверять доступы пользователей к тому или иному каналу
    }

    web.php {
        Маршруты для браузера
    }
}

storage {
    app {
        public {
            Если пользователь загружает аватарку - она попадает сюда
        }
    }

    framework {
        Закэшированные шаблоны для оптимизации
    }

    logs {
        Если возникает какая-то ошибка - можно поискать и найти ее там
    }
}

tests {
    Юнит и Фича тесты
}

vendor {
    Пакеты и зависимости композера
    Исходный код фреймворка в поддиректории laravel
}

.editorconfig {
    Параметры для редактора кода
}

.env {
    Добавлен в .gitignore, переменная окружения
}

.env.example {
    Его нет в .gitignore, это просто шаблон .env
}

.gitignore {
    Добавляем файлы в .gitignore
}

artisan {
    Когда мы выполняем команду php artisan... берем app.php, берем консольное ядро Kernel и обрабатываем команду
}

AboutFiles.txt {
    То что ты читаешь сейчас --__--
}

composer.json {
    Перечислены все пакеты которые нужны для работы нашего проекта
}

composer.lock {
    Фиксирование тех зависимостей и версий которые у нас остановлены
}

package.json {
    Для пакетов которые установлены через npm
}

phpunit.xml {
    Параметры для тестирования
}
