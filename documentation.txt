# Laravel Framework Documentation
was made according to self-improvement spreadsheet

-----------------------------------------------------------------------------------------------------------
Routes:
-----------------------------------------------------------------------------------------------------------
Пример route с callback функцией:
Route::get('/hello', function() {
    return 'Hello World';
});
Следовательно, после перехода в браузере на url: 127.0.0.1:8000/hello - мы увидим надпись Hello Work

По умолчанию все routes находятся в файле routes/web.php
Мы можем зарегистрировать новый файл в RouteServiceProvider.php
    Route::middleware('web')
        ->group(function() {
            require base_path('routes/web.php');
            require base_path('routes/admin.php');
            require base_path('routes/user.php');
        });
О страшном слове middleware позже

-----------------------------------------------------------------------------------------------------------
Routes types:
Route::get('url', 'function');
Route::post('url', 'function');
Route::put('url', 'function');
Route::patch('url', 'function');
Route::delete('url', 'function');
Route::options('url', 'function');
-----------------------------------------------------------------------------------------------------------
GET метод позволяет получить все то, что нельзя никак отредактировать, добавить, удалить и так далее (к примеру HTML странички)
POST - может использоваться также для редактирования ресурса
PUT - для редактирования ресурса
DELETE - удаление ресурса
OPTIONS - представляет запрос информации об опциях соединения, доступных в цепочке запросов/ответов (короче конфиг)

Вроде с помощью POST можно редактировать какую-то запись и с помощью PUT, так в чем же разница?
    Представь, что у нас есть сервис с блогом и постами. В одном блоге может быть несколько постов.
    Для добавления нового поста мы конечно используем метод POST с url например: domain.com/blogs/id
    После создания нового поста метод POST сам создаст URL и вернет этот URL для доступа к нему через GET или для удаления через DELETE

    А теперь допустим, что такой пост уже создан и клиент хочет просто отредактировать его (исправить синтаксическую ошибку например)
    То есть другими словами, клиент хочет ПЕРЕЗАПИСАТЬ пост
    Для этого будет использован метод PUT с URL: domain.com/blogs/id/posts/post_id, он передает обновленную запись в теле запроса
    Сервис, ориентируясь на метод PUT удаляет старую запись и перезаписывает новую, при этом этот пост доступен по тому же URL

    Нет конкретного правила на использования POST и PUT, но все же стоит придерживаться рекомендаций в целях единообразной трактовки
    методов всеми разработчиками

    Смотрел форум по презентации LARAVEL 9, там говорилось о том, что рекомендуется использовать POST для создания подчиненного ресурса
    (все на том же примере: в блоге много постов, значит посты - подчиненный ресурс)

PATCH используется для частичного изменения ресурса. PUT создает новый ресурс или заменяет представление целевого ресурса, данными представленными в теле запроса.
Другими словами, PATCH вложенный объект содержит набор инструкций, описывающих, как ресурс,
находящийся в данный момент на исходном сервере, должен быть модифицирован для создания новой версии.
А в PUT содержится новая версия ресурса целиком.

Если мы хотим зарегистрировать сразу несколько методов, можем использовать match:
    Route::match(['get', 'post'],  'url', 'function');

Если мы хотим зарегистрировать сразу все методы по руту:
    Route::any('url', 'function')

Любые HTML формы, указывающие на маршруты POST, PUT, PATCH, DELETE - должны быть защищены системой csrf
Для этого в HTML форме достаточно указать '@csrf' сразу после объявления формы

Если мы хотим перенаправить пользователя с одного url на другой - используем redirect:
    Route::redirect('current_url', 'new_url');
По умолчанию возвращается код 302, но его можно переопределить:
    Route::redirect('current_url', 'new_url', 301);
Если нужно вернуть только код состояния, используем permanentRedirect:
    Route::permanentRedirect('current_url', 'new_url');

В дальнейшем слова 'HTML шаблон' я буду заменить на 'вьюха'
Если мы хотим вернуть по определенному url вьюху, то используем view:
    Route::view('url', 'name_of_the_view');
Если нужно передать какие-то параметры во вьюхе, используем:
    Route::view('url', 'name_of_the_view', ['name_of_the_value' => 'value']);

Если нам нужно указывать в url какой-либо параметры типа ID пользователя или номер блога, используем:
    Route::get('url/{value}', function($value) {
        return 'User: ' . $value;
    });

Можно передавать сразу несколько параметров:
    Route::get('url/{some_value}/comments/{some_another_value}', function($some_value, $some_another_value) {
        return 'User: ' . $value . ' Post: ' . $some_another_value;
    });

Если параметр не всегда должен/может присутствовать в маршруте, используем '?':
    Route::get('/url/{value?}' , function($value = null) {
        return $value;
    });
    Route::get('/url/{value?}' , function($value = 'value') {
        return $value;
    });

Можно передать какие-то ограничения по регулярному выражению с помощью '->where()':
    Route::get('/url/{value}', function ($value) {
        // some code
    })->where('value', '[A-Za-z]+');
    Route::get('/url/{value}', function ($value) {
        // some code
    })->where('value', '[0-9]+');
    Route::get('/url/{id}/{value}', function ($value) {
        // some code
    })->where([
        'id' => '[0-9]+'
        'value' => '[0-9]+'
        ]);

Также есть шаблонные правила типа whereNumber, whereAlpha, whereAlphaNumeric:
    Route::get('/url/{id}', function($id) {
        // some code
    })->whereNumber('id');
Если входные значения не пройдут валидацию - будет возвращена 404 ошибка

-----------------------------------------------------------------------------------------------------------
Глобальные ограничения
-----------------------------------------------------------------------------------------------------------
Можно поставить определенные ограничения по всем routes в файле RouteServiceProvider в методе boot():
    public function boot()
    {
        Route::pattern('id', '[0-9]+');
    }

-----------------------------------------------------------------------------------------------------------
Именование маршрутов
-----------------------------------------------------------------------------------------------------------
Имена маршрутов всегда должны быть уникальными

Чтобы иметь доступ к маршрутам во views, controller, jobs, commands, events, observers, action-classes, models
(обо всех этих матерных словах позже), можно задать имя маршруту
    Route::get('/url', 'function')->name('name');

Чтобы перенаправить на какой-то route, можем использовать только имя маршрута:
    return redirect()->route('profile');

Можно передать параметры в маршрут, используя имя маршрута:
    Route::get('/url/{id}', function($id) {
        // some logic
    })->name('some_name');

    $url = route('some_name', ['id' => 1]);

Можно передать еще параметры, даже если их нет в самом маршруте, тогда они будут добавлены в url таким образом:
    Route::get('/user/{id}/profile', function ($id) {
        //
    })->name('profile');

    $url = route('profile', ['id' => 1, 'photos' => 'yes']);
    // /user/1/profile?photos=yes
